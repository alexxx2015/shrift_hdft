/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.tum.in.i22.cm.in.pep.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Response implements org.apache.thrift.TBase<Response, Response._Fields>, java.io.Serializable, Cloneable, Comparable<Response> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EXECUTE_EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("executeEvents", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField MODIFIED_EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("modifiedEvents", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResponseTupleSchemeFactory());
  }

  /**
   * 
   * @see StatusType
   */
  public StatusType status; // required
  public List<Event> executeEvents; // optional
  public Event modifiedEvents; // optional
  public String comment; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see StatusType
     */
    STATUS((short)1, "status"),
    EXECUTE_EVENTS((short)2, "executeEvents"),
    MODIFIED_EVENTS((short)3, "modifiedEvents"),
    COMMENT((short)4, "comment");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // EXECUTE_EVENTS
          return EXECUTE_EVENTS;
        case 3: // MODIFIED_EVENTS
          return MODIFIED_EVENTS;
        case 4: // COMMENT
          return COMMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.EXECUTE_EVENTS,_Fields.MODIFIED_EVENTS,_Fields.COMMENT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, StatusType.class)));
    tmpMap.put(_Fields.EXECUTE_EVENTS, new org.apache.thrift.meta_data.FieldMetaData("executeEvents", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Event.class))));
    tmpMap.put(_Fields.MODIFIED_EVENTS, new org.apache.thrift.meta_data.FieldMetaData("modifiedEvents", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Event.class)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response.class, metaDataMap);
  }

  public Response() {
  }

  public Response(
    StatusType status)
  {
    this();
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Response(Response other) {
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetExecuteEvents()) {
      List<Event> __this__executeEvents = new ArrayList<Event>(other.executeEvents.size());
      for (Event other_element : other.executeEvents) {
        __this__executeEvents.add(new Event(other_element));
      }
      this.executeEvents = __this__executeEvents;
    }
    if (other.isSetModifiedEvents()) {
      this.modifiedEvents = new Event(other.modifiedEvents);
    }
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
  }

  public Response deepCopy() {
    return new Response(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.executeEvents = null;
    this.modifiedEvents = null;
    this.comment = null;
  }

  /**
   * 
   * @see StatusType
   */
  public StatusType getStatus() {
    return this.status;
  }

  /**
   * 
   * @see StatusType
   */
  public Response setStatus(StatusType status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getExecuteEventsSize() {
    return (this.executeEvents == null) ? 0 : this.executeEvents.size();
  }

  public java.util.Iterator<Event> getExecuteEventsIterator() {
    return (this.executeEvents == null) ? null : this.executeEvents.iterator();
  }

  public void addToExecuteEvents(Event elem) {
    if (this.executeEvents == null) {
      this.executeEvents = new ArrayList<Event>();
    }
    this.executeEvents.add(elem);
  }

  public List<Event> getExecuteEvents() {
    return this.executeEvents;
  }

  public Response setExecuteEvents(List<Event> executeEvents) {
    this.executeEvents = executeEvents;
    return this;
  }

  public void unsetExecuteEvents() {
    this.executeEvents = null;
  }

  /** Returns true if field executeEvents is set (has been assigned a value) and false otherwise */
  public boolean isSetExecuteEvents() {
    return this.executeEvents != null;
  }

  public void setExecuteEventsIsSet(boolean value) {
    if (!value) {
      this.executeEvents = null;
    }
  }

  public Event getModifiedEvents() {
    return this.modifiedEvents;
  }

  public Response setModifiedEvents(Event modifiedEvents) {
    this.modifiedEvents = modifiedEvents;
    return this;
  }

  public void unsetModifiedEvents() {
    this.modifiedEvents = null;
  }

  /** Returns true if field modifiedEvents is set (has been assigned a value) and false otherwise */
  public boolean isSetModifiedEvents() {
    return this.modifiedEvents != null;
  }

  public void setModifiedEventsIsSet(boolean value) {
    if (!value) {
      this.modifiedEvents = null;
    }
  }

  public String getComment() {
    return this.comment;
  }

  public Response setComment(String comment) {
    this.comment = comment;
    return this;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((StatusType)value);
      }
      break;

    case EXECUTE_EVENTS:
      if (value == null) {
        unsetExecuteEvents();
      } else {
        setExecuteEvents((List<Event>)value);
      }
      break;

    case MODIFIED_EVENTS:
      if (value == null) {
        unsetModifiedEvents();
      } else {
        setModifiedEvents((Event)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case EXECUTE_EVENTS:
      return getExecuteEvents();

    case MODIFIED_EVENTS:
      return getModifiedEvents();

    case COMMENT:
      return getComment();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case EXECUTE_EVENTS:
      return isSetExecuteEvents();
    case MODIFIED_EVENTS:
      return isSetModifiedEvents();
    case COMMENT:
      return isSetComment();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Response)
      return this.equals((Response)that);
    return false;
  }

  public boolean equals(Response that) {
    if (that == null)
      return false;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_executeEvents = true && this.isSetExecuteEvents();
    boolean that_present_executeEvents = true && that.isSetExecuteEvents();
    if (this_present_executeEvents || that_present_executeEvents) {
      if (!(this_present_executeEvents && that_present_executeEvents))
        return false;
      if (!this.executeEvents.equals(that.executeEvents))
        return false;
    }

    boolean this_present_modifiedEvents = true && this.isSetModifiedEvents();
    boolean that_present_modifiedEvents = true && that.isSetModifiedEvents();
    if (this_present_modifiedEvents || that_present_modifiedEvents) {
      if (!(this_present_modifiedEvents && that_present_modifiedEvents))
        return false;
      if (!this.modifiedEvents.equals(that.modifiedEvents))
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Response other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecuteEvents()).compareTo(other.isSetExecuteEvents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecuteEvents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executeEvents, other.executeEvents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModifiedEvents()).compareTo(other.isSetModifiedEvents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModifiedEvents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifiedEvents, other.modifiedEvents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Response(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (isSetExecuteEvents()) {
      if (!first) sb.append(", ");
      sb.append("executeEvents:");
      if (this.executeEvents == null) {
        sb.append("null");
      } else {
        sb.append(this.executeEvents);
      }
      first = false;
    }
    if (isSetModifiedEvents()) {
      if (!first) sb.append(", ");
      sb.append("modifiedEvents:");
      if (this.modifiedEvents == null) {
        sb.append("null");
      } else {
        sb.append(this.modifiedEvents);
      }
      first = false;
    }
    if (isSetComment()) {
      if (!first) sb.append(", ");
      sb.append("comment:");
      if (this.comment == null) {
        sb.append("null");
      } else {
        sb.append(this.comment);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (modifiedEvents != null) {
      modifiedEvents.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResponseStandardSchemeFactory implements SchemeFactory {
    public ResponseStandardScheme getScheme() {
      return new ResponseStandardScheme();
    }
  }

  private static class ResponseStandardScheme extends StandardScheme<Response> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Response struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = StatusType.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXECUTE_EVENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.executeEvents = new ArrayList<Event>(_list10.size);
                for (int _i11 = 0; _i11 < _list10.size; ++_i11)
                {
                  Event _elem12;
                  _elem12 = new Event();
                  _elem12.read(iprot);
                  struct.executeEvents.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setExecuteEventsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MODIFIED_EVENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.modifiedEvents = new Event();
              struct.modifiedEvents.read(iprot);
              struct.setModifiedEventsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comment = iprot.readString();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Response struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.executeEvents != null) {
        if (struct.isSetExecuteEvents()) {
          oprot.writeFieldBegin(EXECUTE_EVENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.executeEvents.size()));
            for (Event _iter13 : struct.executeEvents)
            {
              _iter13.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.modifiedEvents != null) {
        if (struct.isSetModifiedEvents()) {
          oprot.writeFieldBegin(MODIFIED_EVENTS_FIELD_DESC);
          struct.modifiedEvents.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.comment != null) {
        if (struct.isSetComment()) {
          oprot.writeFieldBegin(COMMENT_FIELD_DESC);
          oprot.writeString(struct.comment);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResponseTupleSchemeFactory implements SchemeFactory {
    public ResponseTupleScheme getScheme() {
      return new ResponseTupleScheme();
    }
  }

  private static class ResponseTupleScheme extends TupleScheme<Response> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Response struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetExecuteEvents()) {
        optionals.set(1);
      }
      if (struct.isSetModifiedEvents()) {
        optionals.set(2);
      }
      if (struct.isSetComment()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetExecuteEvents()) {
        {
          oprot.writeI32(struct.executeEvents.size());
          for (Event _iter14 : struct.executeEvents)
          {
            _iter14.write(oprot);
          }
        }
      }
      if (struct.isSetModifiedEvents()) {
        struct.modifiedEvents.write(oprot);
      }
      if (struct.isSetComment()) {
        oprot.writeString(struct.comment);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Response struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.status = StatusType.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.executeEvents = new ArrayList<Event>(_list15.size);
          for (int _i16 = 0; _i16 < _list15.size; ++_i16)
          {
            Event _elem17;
            _elem17 = new Event();
            _elem17.read(iprot);
            struct.executeEvents.add(_elem17);
          }
        }
        struct.setExecuteEventsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.modifiedEvents = new Event();
        struct.modifiedEvents.read(iprot);
        struct.setModifiedEventsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.comment = iprot.readString();
        struct.setCommentIsSet(true);
      }
    }
  }

}


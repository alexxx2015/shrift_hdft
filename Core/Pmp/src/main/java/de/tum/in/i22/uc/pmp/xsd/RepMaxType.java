//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.04.23 at 02:33:36 PM CEST 
//


package de.tum.in.i22.uc.pmp.xsd;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;


/**
 * <p>Java class for RepMaxType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="RepMaxType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;group ref="{http://www.iese.fhg.de/pef/1.0/enforcementLanguage}Operators"/>
 *       &lt;/sequence>
 *       &lt;attribute name="limit" use="required" type="{http://www.w3.org/2001/XMLSchema}long" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RepMaxType", propOrder = {
    "operators"
})
public class RepMaxType implements ToString
{

    @XmlElements({
        @XmlElement(name = "true", type = TrueType.class),
        @XmlElement(name = "false", type = FalseType.class),
        @XmlElement(name = "not", type = NotType.class),
        @XmlElement(name = "or", type = OrType.class),
        @XmlElement(name = "and", type = AndType.class),
        @XmlElement(name = "implies", type = ImpliesType.class),
        @XmlElement(name = "eventMatch", type = EventMatchingOperatorType.class),
        @XmlElement(name = "conditionParamMatch", type = ConditionParamMatchType.class),
        @XmlElement(name = "since", type = SinceType.class),
        @XmlElement(name = "always", type = AlwaysType.class),
        @XmlElement(name = "before", type = BeforeType.class),
        @XmlElement(name = "during", type = DuringType.class),
        @XmlElement(name = "within", type = WithinType.class),
        @XmlElement(name = "repLim", type = RepLimType.class),
        @XmlElement(name = "repSince", type = RepSinceType.class),
        @XmlElement(name = "repMax", type = RepMaxType.class),
        @XmlElement(name = "stateBasedFormula", type = StateBasedOperatorType.class),
        @XmlElement(name = "eval", type = EvalOperatorType.class)
    })
    protected Object operators;
    @XmlAttribute(name = "limit", required = true)
    protected long limit;

    /**
     * Gets the value of the operators property.
     * 
     * @return
     *     possible object is
     *     {@link TrueType }
     *     {@link FalseType }
     *     {@link NotType }
     *     {@link OrType }
     *     {@link AndType }
     *     {@link ImpliesType }
     *     {@link EventMatchingOperatorType }
     *     {@link ConditionParamMatchType }
     *     {@link SinceType }
     *     {@link AlwaysType }
     *     {@link BeforeType }
     *     {@link DuringType }
     *     {@link WithinType }
     *     {@link RepLimType }
     *     {@link RepSinceType }
     *     {@link RepMaxType }
     *     {@link StateBasedOperatorType }
     *     {@link EvalOperatorType }
     *     
     */
    public Object getOperators() {
        return operators;
    }

    /**
     * Sets the value of the operators property.
     * 
     * @param value
     *     allowed object is
     *     {@link TrueType }
     *     {@link FalseType }
     *     {@link NotType }
     *     {@link OrType }
     *     {@link AndType }
     *     {@link ImpliesType }
     *     {@link EventMatchingOperatorType }
     *     {@link ConditionParamMatchType }
     *     {@link SinceType }
     *     {@link AlwaysType }
     *     {@link BeforeType }
     *     {@link DuringType }
     *     {@link WithinType }
     *     {@link RepLimType }
     *     {@link RepSinceType }
     *     {@link RepMaxType }
     *     {@link StateBasedOperatorType }
     *     {@link EvalOperatorType }
     *     
     */
    public void setOperators(Object value) {
        this.operators = value;
    }

    public boolean isSetOperators() {
        return (this.operators!= null);
    }

    /**
     * Gets the value of the limit property.
     * 
     */
    public long getLimit() {
        return limit;
    }

    /**
     * Sets the value of the limit property.
     * 
     */
    public void setLimit(long value) {
        this.limit = value;
    }

    public boolean isSetLimit() {
        return true;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            Object theOperators;
            theOperators = this.getOperators();
            strategy.appendField(locator, this, "operators", buffer, theOperators);
        }
        {
            long theLimit;
            theLimit = (this.isSetLimit()?this.getLimit(): 0L);
            strategy.appendField(locator, this, "limit", buffer, theLimit);
        }
        return buffer;
    }

}

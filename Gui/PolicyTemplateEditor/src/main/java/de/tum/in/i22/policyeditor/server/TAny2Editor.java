/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.tum.in.i22.policyeditor.server;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TAny2Editor {

  public interface Iface {

    public de.tum.in.i22.uc.thrift.types.TStatus specifyPolicyFor(Set<de.tum.in.i22.uc.thrift.types.TContainer> representations, String dataClass) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void specifyPolicyFor(Set<de.tum.in.i22.uc.thrift.types.TContainer> representations, String dataClass, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public de.tum.in.i22.uc.thrift.types.TStatus specifyPolicyFor(Set<de.tum.in.i22.uc.thrift.types.TContainer> representations, String dataClass) throws org.apache.thrift.TException
    {
      send_specifyPolicyFor(representations, dataClass);
      return recv_specifyPolicyFor();
    }

    public void send_specifyPolicyFor(Set<de.tum.in.i22.uc.thrift.types.TContainer> representations, String dataClass) throws org.apache.thrift.TException
    {
      specifyPolicyFor_args args = new specifyPolicyFor_args();
      args.setRepresentations(representations);
      args.setDataClass(dataClass);
      sendBase("specifyPolicyFor", args);
    }

    public de.tum.in.i22.uc.thrift.types.TStatus recv_specifyPolicyFor() throws org.apache.thrift.TException
    {
      specifyPolicyFor_result result = new specifyPolicyFor_result();
      receiveBase(result, "specifyPolicyFor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "specifyPolicyFor failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void specifyPolicyFor(Set<de.tum.in.i22.uc.thrift.types.TContainer> representations, String dataClass, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      specifyPolicyFor_call method_call = new specifyPolicyFor_call(representations, dataClass, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class specifyPolicyFor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Set<de.tum.in.i22.uc.thrift.types.TContainer> representations;
      private String dataClass;
      public specifyPolicyFor_call(Set<de.tum.in.i22.uc.thrift.types.TContainer> representations, String dataClass, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.representations = representations;
        this.dataClass = dataClass;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("specifyPolicyFor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        specifyPolicyFor_args args = new specifyPolicyFor_args();
        args.setRepresentations(representations);
        args.setDataClass(dataClass);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public de.tum.in.i22.uc.thrift.types.TStatus getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_specifyPolicyFor();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("specifyPolicyFor", new specifyPolicyFor());
      return processMap;
    }

    public static class specifyPolicyFor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, specifyPolicyFor_args> {
      public specifyPolicyFor() {
        super("specifyPolicyFor");
      }

      public specifyPolicyFor_args getEmptyArgsInstance() {
        return new specifyPolicyFor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public specifyPolicyFor_result getResult(I iface, specifyPolicyFor_args args) throws org.apache.thrift.TException {
        specifyPolicyFor_result result = new specifyPolicyFor_result();
        result.success = iface.specifyPolicyFor(args.representations, args.dataClass);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("specifyPolicyFor", new specifyPolicyFor());
      return processMap;
    }

    public static class specifyPolicyFor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, specifyPolicyFor_args, de.tum.in.i22.uc.thrift.types.TStatus> {
      public specifyPolicyFor() {
        super("specifyPolicyFor");
      }

      public specifyPolicyFor_args getEmptyArgsInstance() {
        return new specifyPolicyFor_args();
      }

      public AsyncMethodCallback<de.tum.in.i22.uc.thrift.types.TStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<de.tum.in.i22.uc.thrift.types.TStatus>() { 
          public void onComplete(de.tum.in.i22.uc.thrift.types.TStatus o) {
            specifyPolicyFor_result result = new specifyPolicyFor_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            specifyPolicyFor_result result = new specifyPolicyFor_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, specifyPolicyFor_args args, org.apache.thrift.async.AsyncMethodCallback<de.tum.in.i22.uc.thrift.types.TStatus> resultHandler) throws TException {
        iface.specifyPolicyFor(args.representations, args.dataClass,resultHandler);
      }
    }

  }

  public static class specifyPolicyFor_args implements org.apache.thrift.TBase<specifyPolicyFor_args, specifyPolicyFor_args._Fields>, java.io.Serializable, Cloneable, Comparable<specifyPolicyFor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("specifyPolicyFor_args");

    private static final org.apache.thrift.protocol.TField REPRESENTATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("representations", org.apache.thrift.protocol.TType.SET, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("dataClass", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new specifyPolicyFor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new specifyPolicyFor_argsTupleSchemeFactory());
    }

    public Set<de.tum.in.i22.uc.thrift.types.TContainer> representations; // required
    public String dataClass; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPRESENTATIONS((short)1, "representations"),
      DATA_CLASS((short)2, "dataClass");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPRESENTATIONS
            return REPRESENTATIONS;
          case 2: // DATA_CLASS
            return DATA_CLASS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPRESENTATIONS, new org.apache.thrift.meta_data.FieldMetaData("representations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, de.tum.in.i22.uc.thrift.types.TContainer.class))));
      tmpMap.put(_Fields.DATA_CLASS, new org.apache.thrift.meta_data.FieldMetaData("dataClass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(specifyPolicyFor_args.class, metaDataMap);
    }

    public specifyPolicyFor_args() {
    }

    public specifyPolicyFor_args(
      Set<de.tum.in.i22.uc.thrift.types.TContainer> representations,
      String dataClass)
    {
      this();
      this.representations = representations;
      this.dataClass = dataClass;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public specifyPolicyFor_args(specifyPolicyFor_args other) {
      if (other.isSetRepresentations()) {
        Set<de.tum.in.i22.uc.thrift.types.TContainer> __this__representations = new HashSet<de.tum.in.i22.uc.thrift.types.TContainer>(other.representations.size());
        for (de.tum.in.i22.uc.thrift.types.TContainer other_element : other.representations) {
          __this__representations.add(new de.tum.in.i22.uc.thrift.types.TContainer(other_element));
        }
        this.representations = __this__representations;
      }
      if (other.isSetDataClass()) {
        this.dataClass = other.dataClass;
      }
    }

    public specifyPolicyFor_args deepCopy() {
      return new specifyPolicyFor_args(this);
    }

    @Override
    public void clear() {
      this.representations = null;
      this.dataClass = null;
    }

    public int getRepresentationsSize() {
      return (this.representations == null) ? 0 : this.representations.size();
    }

    public java.util.Iterator<de.tum.in.i22.uc.thrift.types.TContainer> getRepresentationsIterator() {
      return (this.representations == null) ? null : this.representations.iterator();
    }

    public void addToRepresentations(de.tum.in.i22.uc.thrift.types.TContainer elem) {
      if (this.representations == null) {
        this.representations = new HashSet<de.tum.in.i22.uc.thrift.types.TContainer>();
      }
      this.representations.add(elem);
    }

    public Set<de.tum.in.i22.uc.thrift.types.TContainer> getRepresentations() {
      return this.representations;
    }

    public specifyPolicyFor_args setRepresentations(Set<de.tum.in.i22.uc.thrift.types.TContainer> representations) {
      this.representations = representations;
      return this;
    }

    public void unsetRepresentations() {
      this.representations = null;
    }

    /** Returns true if field representations is set (has been assigned a value) and false otherwise */
    public boolean isSetRepresentations() {
      return this.representations != null;
    }

    public void setRepresentationsIsSet(boolean value) {
      if (!value) {
        this.representations = null;
      }
    }

    public String getDataClass() {
      return this.dataClass;
    }

    public specifyPolicyFor_args setDataClass(String dataClass) {
      this.dataClass = dataClass;
      return this;
    }

    public void unsetDataClass() {
      this.dataClass = null;
    }

    /** Returns true if field dataClass is set (has been assigned a value) and false otherwise */
    public boolean isSetDataClass() {
      return this.dataClass != null;
    }

    public void setDataClassIsSet(boolean value) {
      if (!value) {
        this.dataClass = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPRESENTATIONS:
        if (value == null) {
          unsetRepresentations();
        } else {
          setRepresentations((Set<de.tum.in.i22.uc.thrift.types.TContainer>)value);
        }
        break;

      case DATA_CLASS:
        if (value == null) {
          unsetDataClass();
        } else {
          setDataClass((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPRESENTATIONS:
        return getRepresentations();

      case DATA_CLASS:
        return getDataClass();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPRESENTATIONS:
        return isSetRepresentations();
      case DATA_CLASS:
        return isSetDataClass();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof specifyPolicyFor_args)
        return this.equals((specifyPolicyFor_args)that);
      return false;
    }

    public boolean equals(specifyPolicyFor_args that) {
      if (that == null)
        return false;

      boolean this_present_representations = true && this.isSetRepresentations();
      boolean that_present_representations = true && that.isSetRepresentations();
      if (this_present_representations || that_present_representations) {
        if (!(this_present_representations && that_present_representations))
          return false;
        if (!this.representations.equals(that.representations))
          return false;
      }

      boolean this_present_dataClass = true && this.isSetDataClass();
      boolean that_present_dataClass = true && that.isSetDataClass();
      if (this_present_dataClass || that_present_dataClass) {
        if (!(this_present_dataClass && that_present_dataClass))
          return false;
        if (!this.dataClass.equals(that.dataClass))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(specifyPolicyFor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepresentations()).compareTo(other.isSetRepresentations());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepresentations()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.representations, other.representations);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataClass()).compareTo(other.isSetDataClass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataClass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataClass, other.dataClass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("specifyPolicyFor_args(");
      boolean first = true;

      sb.append("representations:");
      if (this.representations == null) {
        sb.append("null");
      } else {
        sb.append(this.representations);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataClass:");
      if (this.dataClass == null) {
        sb.append("null");
      } else {
        sb.append(this.dataClass);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class specifyPolicyFor_argsStandardSchemeFactory implements SchemeFactory {
      public specifyPolicyFor_argsStandardScheme getScheme() {
        return new specifyPolicyFor_argsStandardScheme();
      }
    }

    private static class specifyPolicyFor_argsStandardScheme extends StandardScheme<specifyPolicyFor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, specifyPolicyFor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPRESENTATIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                  struct.representations = new HashSet<de.tum.in.i22.uc.thrift.types.TContainer>(2*_set0.size);
                  for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                  {
                    de.tum.in.i22.uc.thrift.types.TContainer _elem2;
                    _elem2 = new de.tum.in.i22.uc.thrift.types.TContainer();
                    _elem2.read(iprot);
                    struct.representations.add(_elem2);
                  }
                  iprot.readSetEnd();
                }
                struct.setRepresentationsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA_CLASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dataClass = iprot.readString();
                struct.setDataClassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, specifyPolicyFor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.representations != null) {
          oprot.writeFieldBegin(REPRESENTATIONS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.representations.size()));
            for (de.tum.in.i22.uc.thrift.types.TContainer _iter3 : struct.representations)
            {
              _iter3.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.dataClass != null) {
          oprot.writeFieldBegin(DATA_CLASS_FIELD_DESC);
          oprot.writeString(struct.dataClass);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class specifyPolicyFor_argsTupleSchemeFactory implements SchemeFactory {
      public specifyPolicyFor_argsTupleScheme getScheme() {
        return new specifyPolicyFor_argsTupleScheme();
      }
    }

    private static class specifyPolicyFor_argsTupleScheme extends TupleScheme<specifyPolicyFor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, specifyPolicyFor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepresentations()) {
          optionals.set(0);
        }
        if (struct.isSetDataClass()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRepresentations()) {
          {
            oprot.writeI32(struct.representations.size());
            for (de.tum.in.i22.uc.thrift.types.TContainer _iter4 : struct.representations)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetDataClass()) {
          oprot.writeString(struct.dataClass);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, specifyPolicyFor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set5 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.representations = new HashSet<de.tum.in.i22.uc.thrift.types.TContainer>(2*_set5.size);
            for (int _i6 = 0; _i6 < _set5.size; ++_i6)
            {
              de.tum.in.i22.uc.thrift.types.TContainer _elem7;
              _elem7 = new de.tum.in.i22.uc.thrift.types.TContainer();
              _elem7.read(iprot);
              struct.representations.add(_elem7);
            }
          }
          struct.setRepresentationsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataClass = iprot.readString();
          struct.setDataClassIsSet(true);
        }
      }
    }

  }

  public static class specifyPolicyFor_result implements org.apache.thrift.TBase<specifyPolicyFor_result, specifyPolicyFor_result._Fields>, java.io.Serializable, Cloneable, Comparable<specifyPolicyFor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("specifyPolicyFor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new specifyPolicyFor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new specifyPolicyFor_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see de.tum.in.i22.uc.thrift.types.TStatus
     */
    public de.tum.in.i22.uc.thrift.types.TStatus success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see de.tum.in.i22.uc.thrift.types.TStatus
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, de.tum.in.i22.uc.thrift.types.TStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(specifyPolicyFor_result.class, metaDataMap);
    }

    public specifyPolicyFor_result() {
    }

    public specifyPolicyFor_result(
      de.tum.in.i22.uc.thrift.types.TStatus success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public specifyPolicyFor_result(specifyPolicyFor_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public specifyPolicyFor_result deepCopy() {
      return new specifyPolicyFor_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see de.tum.in.i22.uc.thrift.types.TStatus
     */
    public de.tum.in.i22.uc.thrift.types.TStatus getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see de.tum.in.i22.uc.thrift.types.TStatus
     */
    public specifyPolicyFor_result setSuccess(de.tum.in.i22.uc.thrift.types.TStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((de.tum.in.i22.uc.thrift.types.TStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof specifyPolicyFor_result)
        return this.equals((specifyPolicyFor_result)that);
      return false;
    }

    public boolean equals(specifyPolicyFor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(specifyPolicyFor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("specifyPolicyFor_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class specifyPolicyFor_resultStandardSchemeFactory implements SchemeFactory {
      public specifyPolicyFor_resultStandardScheme getScheme() {
        return new specifyPolicyFor_resultStandardScheme();
      }
    }

    private static class specifyPolicyFor_resultStandardScheme extends StandardScheme<specifyPolicyFor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, specifyPolicyFor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = de.tum.in.i22.uc.thrift.types.TStatus.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, specifyPolicyFor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class specifyPolicyFor_resultTupleSchemeFactory implements SchemeFactory {
      public specifyPolicyFor_resultTupleScheme getScheme() {
        return new specifyPolicyFor_resultTupleScheme();
      }
    }

    private static class specifyPolicyFor_resultTupleScheme extends TupleScheme<specifyPolicyFor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, specifyPolicyFor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, specifyPolicyFor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = de.tum.in.i22.uc.thrift.types.TStatus.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}

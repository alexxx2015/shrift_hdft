# config/win64 scons configuration
import os, platform, subprocess, sys
Import('tmpConfig')

DefaultEnvironment(tools=[])
#env=Environment(tools=['mingw','javac','jar','rmic'],
env=Environment(CC='x86_64-w64-mingw32-gcc',
                PEFCONFIG=tmpConfig['PEFCONFIG'], 
                PEFBASE=tmpConfig['PEFBASE'], 
                PEFBUILD=tmpConfig['PEFBUILD'], 
                PEFincludes=tmpConfig['PEFincludes'])

env['PEFtarget'] = "win64"

if not GetOption('help'):
  try:
    absPathCC = subprocess.check_output(["which", env['CC']])
    
    env['CC'] = absPathCC.strip()
    output = subprocess.check_output([env['CC'], "--version"])
  except OSError as e:
    print "OSError({0}): {1}".format(e.errno, e.strerror)
  except:
    print "Unexpected error:", sys.exc_info()[0]
    print "No Cross-Compiler found for win64!"
    env['compilerFound']=False
    Return('env')
  env['compilerFound']=True
  

# Java JDK include path
java=os.path.join(env['PEFBASE'], "..", "resources","win64","jdk","include")

env['STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME']=1

env.Append(CPPPATH=[java])
env.Append(CPPPATH=[os.path.join(java, "win32")])

env.Append(LIBPATH=[os.path.join(java, "..", "jre","bin","server")])

env.Append(LIBPATH=[os.path.join(env['PEFBASE'], "..", "resources", "win64", "glib2", "lib"),
                    os.path.join(env['PEFBASE'], "..", "..", "..") # for jvm -> todo
                   ])
                   

env.Append(PEFpdpjni=' -DPDP_JNI -DGLIB_STATIC_COMPILATION -DGOBJECT_STATIC_COMPILATION -D_JNI_IMPLEMENTATION_ -DLIBXML_STATIC -Wl,--kill-at -shared ')

env.Prepend(LIBS=['glib-2.0','xml2'])
env.Append(LIBS=['ole32'])
env.Append(LIBS=['ws2_32','wsock32'])

#env.Append(LIBS=['regex'])
# linking to static regex.a not sufficient; still libgnurx required
#env.Append(LibRegexStatic=File(os.path.join(env['PEFBASE'], "..", "resources","win32","regex","lib","libregex.a")))
#env.Append(LIBS=[env['LibRegexStatic']])

env.Append(LibXML2Static =File(os.path.join(env['PEFBASE'], "..", "resources","win64","libxml2","libxml","lib","libxml2.a")))
env.Append(LibZStatic    =File(os.path.join(env['PEFBASE'], "..", "resources","win64","zlib","lib","libz.a")))
env.Append(LibIntlStatic =File(os.path.join(env['PEFBASE'], "..", "resources","win64","static","gettext","lib","libintl.a")))
env.Append(LibIConvStatic=File(os.path.join(env['PEFBASE'], "..", "resources","win64","static","libiconv","lib","libiconv.a")))
env.Append(LibGLibStatic=File(os.path.join(env['PEFBASE'], "..", "resources","win64","static","glib2","lib","libglib-2.0.a")))
env.Append(LibWinPThreadStatic=File(os.path.join(env['PEFBASE'], "..", "resources","win64","lib","libwinpthread.a")))
env.Append(LibPDPStatic=File(os.path.join(env['PEFBASE'],'..','..','..','bin','windows','components','pdp','libpdp.a')))

env.Append(LIBS=[env['LibIntlStatic'], env['LibXML2Static'], env['LibZStatic']])

env.Append(CPPPATH=[os.path.join(env['PEFBASE'], "..", "resources", "win64", "libxml2","libxml","include","libxml2"),
                    os.path.join(env['PEFBASE'], "..", "resources", "win64", "libiconv","include"),
                    os.path.join(env['PEFBASE'], "..", "resources", "win64", "glib2", "include","glib-2.0"),
                    os.path.join(env['PEFBASE'], "..", "resources", "win64", "glib2", "lib","glib-2.0","include"),
                    os.path.join(env['PEFBASE'], "..", "resources", "win32", "regex", "include")					
                   ]
          )
		  
#######################################################################
# module configuration
env['PEFCONFIG']['pdpjni']      = True
env['PEFCONFIG']['socketUtils'] = False

env['PEFCONFIG']['systracePEP'] = False
env['PEFCONFIG']['shellWrapper']= False
env['PEFCONFIG']['dataCont']    = False

if ARGUMENTS.get('verbose') != "1":
  env.Replace(CCCOMSTR     = "Cross-Compiling $TARGET")
  env.Replace(CXXCOMSTR    = "Cross-Compiling C++ $TARGET")
  env.Replace(LINKCOMSTR   = "Cross-Linking $TARGET")
  env.Replace(SHCCCOMSTR   = "Cross-Compiling shared library $TARGET")
  env.Replace(SHCXXCOMSTR  = "Cross-Compiling C++ shared library $TARGET")  
  env.Replace(SHLINKCOMSTR = "Cross-Linking shared library $TARGET")
  env.Replace(ARCOMSTR     = "Cross-Archiving static library $TARGET")
  env.Replace(RANLIBCOMSTR = "Cross-Indexing static library $TARGET")

Return('env')
